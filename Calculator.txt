import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
public class Calculator extends JFrame implements ActionListener {
    JButton Submit,Clear,One,Two,Three,Four,Five,Six,Seven,Eight,Nine,Zero,Add,Sub,Div,Mul,Bracket1,Bracket2;
    JLabel Output;
    JTextField txt1;
     public Calculator() {
        // Set the title of the Frame
        setTitle("Calculator");
        setSize(300, 400);
        setLocation(200, 100);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(null);

        // Make all the Labels
        Output = new JLabel("Result");
        Output.setBounds(50, 50, 100, 30);
        add(Output);

        // Create Text Field
        txt1 = new JTextField();
        txt1.setBounds(50, 90, 200, 30);
        add(txt1);

        // Create All the required Buttons with colors
        Clear = new JButton("C");
        Clear.setBounds(40, 140, 50, 30);
        Clear.setBackground(Color.RED);
        Clear.setForeground(Color.WHITE);
        add(Clear);

        Bracket1 = new JButton("(");
        Bracket1.setBounds(100, 140, 50, 30);
        Bracket1.setBackground(Color.LIGHT_GRAY);
        add(Bracket1);

        Bracket2 = new JButton(")");
        Bracket2.setBounds(160, 140, 50, 30);
        Bracket2.setBackground(Color.LIGHT_GRAY);
        add(Bracket2);

        Div = new JButton("%");
        Div.setBounds(220, 140, 50, 30);
        Div.setBackground(Color.LIGHT_GRAY);
        add(Div);

        Seven = new JButton("7");
        Seven.setBounds(40, 180, 50, 30);
        Seven.setBackground(Color.WHITE);
        add(Seven);

        Eight = new JButton("8");
        Eight.setBounds(100, 180, 50, 30);
        Eight.setBackground(Color.WHITE);
        add(Eight);

        Nine = new JButton("9");
        Nine.setBounds(160, 180, 50, 30);
        Nine.setBackground(Color.WHITE);
        add(Nine);

        Mul = new JButton("*");
        Mul.setBounds(220, 180, 50, 30);
        Mul.setBackground(Color.LIGHT_GRAY);
        add(Mul);

        Four = new JButton("4");
        Four.setBounds(40, 220, 50, 30);
        Four.setBackground(Color.WHITE);
        add(Four);

        Five = new JButton("5");
        Five.setBounds(100, 220, 50, 30);
        Five.setBackground(Color.WHITE);
        add(Five);

        Six = new JButton("6");
        Six.setBounds(160, 220, 50, 30);
        Six.setBackground(Color.WHITE);
        add(Six);

        Sub = new JButton("-");
        Sub.setBounds(220, 220, 50, 30);
        Sub.setBackground(Color.LIGHT_GRAY);
        add(Sub);

        One = new JButton("1");
        One.setBounds(40, 260, 50, 30);
        One.setBackground(Color.WHITE);
        add(One);

        Two = new JButton("2");
        Two.setBounds(100, 260, 50, 30);
        Two.setBackground(Color.WHITE);
        add(Two);

        Three = new JButton("3");
        Three.setBounds(160, 260, 50, 30);
        Three.setBackground(Color.WHITE);
        add(Three);

        Add = new JButton("+");
        Add.setBounds(220, 260, 50, 30);
        Add.setBackground(Color.LIGHT_GRAY);
        add(Add);

        Zero = new JButton("0");
        Zero.setBounds(40, 300, 110, 30);
        Zero.setBackground(Color.WHITE);
        add(Zero);

        Submit = new JButton("=");
        Submit.setBounds(160, 300, 110, 30);
        Submit.setBackground(Color.GREEN);
        Submit.setForeground(Color.WHITE);
        add(Submit);

        // Add action listeners
        Clear.addActionListener(this);
        Bracket1.addActionListener(this);
        Bracket2.addActionListener(this);
        Div.addActionListener(this);
        Seven.addActionListener(this);
        Eight.addActionListener(this);
        Nine.addActionListener(this);
        Mul.addActionListener(this);
        Four.addActionListener(this);
        Five.addActionListener(this);
        Six.addActionListener(this);
        Sub.addActionListener(this);
        One.addActionListener(this);
        Two.addActionListener(this);
        Three.addActionListener(this);
        Add.addActionListener(this);
        Zero.addActionListener(this);
        Submit.addActionListener(this);

        setVisible(true);
    }
    public static void main(String[] args) {
        new Calculator();
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == Submit) 
        {
            String temp=txt1.getText();
            double r;
            if(validate(temp))
            {
                r=result(temp);
                Output.setText(Double.toString(r));
            }
            else
            Output.setText("Missing Braces");
        } 
        else if (e.getSource() == Clear) {
            txt1.setText("");
            Output.setText(" ");
        }
        else 
        {
            JButton source = (JButton) e.getSource();
            txt1.setText(txt1.getText() + source.getText());
        }
    }
    boolean validate(String s)
    {
        Stack<Character>st=new Stack<>();
        if(s.charAt(0)==')')
        return false;
        int l=s.length();
        for(int i=0;i<l;i++)
        {
            if(s.charAt(i)=='(')
            st.push(s.charAt(i));
            else if(s.charAt(i)==')')
            st.pop();
        }
        if(!st.empty())
        return false;
        return true;
    }
    double result(String s) {
        Stack<Double> nums = new Stack<>();
        Stack<Character> ops = new Stack<>();
        int length = s.length();
        
        for (int i = 0; i < length; i++) {
            char c = s.charAt(i);

            if (Character.isDigit(c)) {
                double num = 0;
                while (i < length && Character.isDigit(s.charAt(i))) {
                    num = num * 10 + (s.charAt(i) - '0');
                    i++;
                }
                i--;
                nums.push(num);
            } else if (c == '(') {
                ops.push(c);
            } else if (c == ')') {
                while (ops.peek() != '(') {
                    nums.push(applyOp(ops.pop(), nums.pop(), nums.pop()));
                }
                ops.pop();
            } else if (c == '+' || c == '-' || c == '*' || c == '%') {
                while (!ops.isEmpty() && hasPrecedence(c, ops.peek())) {
                    nums.push(applyOp(ops.pop(), nums.pop(), nums.pop()));
                }
                ops.push(c);
            }
        }

        while (!ops.isEmpty()) {
            nums.push(applyOp(ops.pop(), nums.pop(), nums.pop()));
        }
        
        return nums.pop();
    }
    boolean hasPrecedence(char op1, char op2) {
        if (op2 == '(' || op2 == ')') return false;
        if ((op1 == '*' || op1 == '%') && (op2 == '+' || op2 == '-')) return false;
        return true;
    }
    double applyOp(char op, double b, double a) {
        switch (op) {
            case '+': return a + b;
            case '-': return a - b;
            case '*': return a * b;
            case '%': return a / b;
        }
        return 0;
    }
}
